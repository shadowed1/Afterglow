#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
DISPLAY_SCALING=""
CURSOR_SIZE=""

if [ -f "$HOME/opt/.flatpak.env" ]; then
    . "$HOME/opt/.flatpak.env"
fi

set_display_scaling() {
    local input="$1"

    if [[ "$input" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        DISPLAY_SCALING=$(printf "%.2f" "$input")

        if (( $(awk "BEGIN {print ($DISPLAY_SCALING < 0.25)}") )); then
            echo "${RED}Warning: DISPLAY_SCALING below 0.25, resetting to 1.0${RESET}" >&2
            DISPLAY_SCALING=1.0
        elif (( $(awk "BEGIN {print ($DISPLAY_SCALING > 4.0)}") )); then
            echo "${RED}Warning: DISPLAY_SCALING above 4.0, resetting to 4.0${RESET}" >&2
            DISPLAY_SCALING=4.0
        fi

        export ELECTRON_FORCE_DEVICE_SCALE_FACTOR=$DISPLAY_SCALING
        echo "${GREEN}Display scaling set to $DISPLAY_SCALING${RESET}" >&2
    else
        echo "${RED}Error: DISPLAY_SCALING must be a number between 0.25 and 4.0 (e.g., 1, 1.5, 2.25)${RESET}" >&2
        return 1
    fi
}

set_cursor_scaling() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "${RED}Error: Cursor size must be an integer.${RESET}" >&2
        return 1
    fi

    CURSOR_SIZE=$1

    if (( CURSOR_SIZE < 8 )); then
        echo "${YELLOW}Warning: Cursor size below 8, resetting to 8.${RESET}" >&2
        CURSOR_SIZE=8
    elif (( CURSOR_SIZE > 200 )); then
        echo "${YELLOW}Warning: Cursor size above 200, resetting to 200.${RESET}" >&2
        CURSOR_SIZE=200
    fi

    export XCURSOR_SIZE=$CURSOR_SIZE
    echo "${GREEN}Cursor size set to $CURSOR_SIZE${RESET}" >&2
}

show_help() {
    echo "${MAGENTA}${BOLD}"
    echo "Commands with examples:"
    echo "${RESET}${MAGENTA}"
    echo "aurora                     # Show current display and cursor values"
    echo "source aurora display 1.0  # Set display scaling factor (0.25 - 4.0)"
    echo "source aurora cursor 32    # Set cursor size (8 - 200)"
    echo "aurora help                # Show help"
    echo "aurora_debug               # echo a list of paths that flatpak can use"
    echo "aurora reinstall           # Redownload Aurora from Github"
    echo "aurora uninstall           # Launch uninstaller"
    echo ""
    echo "flatpak list               # Show list of installed apps"
    echo "flatpak --help              # flatpak has a lot of commands!"
    echo "${BLUE}${BOLD}"
    echo "NORMAL FLATPAK EXAMPLE:${RESET}${BLUE}"
    echo ""
    echo "flatpak search Discord"
    echo "flatpak install com.discordapp.Discord"
    echo "flatpak run com.discordapp.Discord${RESET}"
    echo "${BLUE}${BOLD}"
    echo "Failed to connect to bus error - run like examples below:"
    echo "${RESET}${CYAN}"
    echo "flatpak search visualstudio"
    echo "flatpak install com.visualstudio.code"
    echo "flatpak run --command=sh com.visualstudio.code"
    echo "/app/bin/code --no-sandbox --no-zygote --disable-gpu-sandbox --disable-features=UsePortal"
    echo ""
    echo "${RESET}${CYAN}${BOLD}Use ls /app/bin to help find the app in these situations.${RESET}${CYAN}"
    echo ""
    echo "Brave browser might need to append '&' at the end to run:"
    echo "flatpak search Brave"
    echo "flatpak install com.brave.Browser"
    echo "flatpak run --command=sh com.brave.Browser"
    echo "/app/brave/brave --no-sandbox --no-zygote --disable-gpu-sandbox --disable-features=UsePortal &"
    echo "${RESET}"
}

aurora_uninstall() {
    echo "${MAGENTA}${BOLD}Aurora Uninstaller${RESET}"
    echo "${BLUE}${BOLD}Select an option:${RESET}"
    echo "${BLUE}[0] Quit${RESET}"
    echo "${CYAN}{[1] Remove ~/opt (Aurora + Flatpak only; keep Flatpak apps and data)${RESET}"
    echo "${MAGENTA}[2] Full uninstall (removes ~/opt, all Flatpak apps/data, entries created in ~/.bashcr, and dependencies)${RESET}"
    echo ""
    read -rp "Enter your choice [0-2]: " CHOICE

    case "$CHOICE" in
        0)
            echo "${BLUE}Quit.${RESET}"
            return 0
            ;;
        1)
            echo "${CYAN}Removing ~/opt only (leaving Flatpak apps/data)...${RESET}"
            if [ -d "$HOME/opt" ]; then
                rm -rf "$HOME/opt"
                echo "${CYAN}Removed $HOME/opt${RESET}"
            else
                echo "${YELLOW}$HOME/opt not found.${RESET}"
            fi
            echo "${CYAN}Delete Aurora + Flatpak, but keep Flatpak apps + data.${RESET}"
            ;;
       2)
            echo "${MAGENTA}${BOLD}Full uninstall: Removing ~/opt, ~/.local/share/flatpak, ~/.borealisrc entries and ~/.xdg-runtime-dir${RESET}"
            echo "${RED}${BOLD}Are you sure? This full uninstall will also delete your Flatpak apps' data.${RESET}"
            read -rp "Type 'yes' to confirm: " FULL_CONFIRM
            if [ "$FULL_CONFIRM" != "yes" ]; then
                echo "${GREEN}Full uninstall aborted. No changes made.${RESET}"
                return 1
            fi

                sed -i '/\.flatpak\.env/d' "$HOME/.borealisrc"
                sed -i '/\.flatpak\.logic/d' "$HOME/.borealisrc"

                

            for DIR in "$HOME/opt" "$HOME/.local/share/flatpak" "$HOME/.xdg-runtime-dir"; do
                if [ -e "$DIR" ]; then
                    rm -rf "$DIR"
                    echo "${MAGENTA}Removed $DIR${RESET}"
                else
                    echo "${YELLOW}$DIR not found.${RESET}"
                fi
            done

            if grep -q "# Flatpak --user logic" "$HOME/.borealisrc"; then
                # Delete from marker to the closing "}" of the function
                sed -i '/# Flatpak --user logic/,/^}/d' "$HOME/.borealisrc"
                echo "${CYAN}Removed Aurora Flatpak function from .borealisrc${RESET}"
            fi

            sed -i '/\.flatpak\.env/d' "$HOME/.borealisrc"
            sed -i '/\.flatpak\.logic/d' "$HOME/.borealisrc"
            
            echo "${CYAN}${BOLD}Full Aurora uninstall complete. All Flatpak dependencies, apps, and data removed. ~/.borealisrc entries removed. ${RESET}"
            ;;
        *)
            echo "${RED}Invalid choice. Exiting.${RESET}"
            return 1
            ;;
    esac
}

case "$1" in
    display)
        set_display_scaling "$2"
        ;;
    cursor)
        set_cursor_scaling "$2"
        ;;
    --h|-h|h|--help|-help|help)
        show_help
        ;;
    ""|status)
        if [[ -z "$ELECTRON_FORCE_DEVICE_SCALE_FACTOR" && -z "$XCURSOR_SIZE" ]]; then
            echo "${CYAN}ELECTRON_FORCE_DEVICE_SCALE_FACTOR and XCURSOR_SIZE remain default.${RESET}"
        else
            [[ -n "$ELECTRON_FORCE_DEVICE_SCALE_FACTOR" ]] && \
                echo "${MAGENTA}ELECTRON_FORCE_DEVICE_SCALE_FACTOR = $ELECTRON_FORCE_DEVICE_SCALE_FACTOR${RESET}" || \
                echo "${BLUE}ELECTRON_FORCE_DEVICE_SCALE_FACTOR remain default.${RESET}"

            [[ -n "$XCURSOR_SIZE" ]] && \
                echo "${MAGENTA}XCURSOR_SIZE = $XCURSOR_SIZE${RESET}" || \
                echo "${BLUE}XCURSOR_SIZE remain default.${RESET}"
        fi
        ;;
        reinstall)
        bash <(curl -s "https://raw.githubusercontent.com/shadowed1/Aurora/main/aurora_installer.sh?$(date +%s)")
        ;;
        uninstall)
        aurora_uninstall
        ;;
    *)
        echo "${RED}Unknown command $1 ${RESET}"
        show_help
        exit 1
        ;;
esac
